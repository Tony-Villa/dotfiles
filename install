#!/bin/bash
# set -x
set -e
{ #prevent exec until fully downloaded?

    CWD=`dirname -- "$( readlink -f -- "$0"; )"`
    DIR=~/.dotfiles

    function link_file () {
        dest=$1 # real file
        link=$2 # the link file to create

        # if a file exists at $link and is not a symlink...
        if [ ! -L $link ]; then
            if [ -f $link ] || [ -d $link ]; then
                # prompt to overwrite
                read -p "Overwrite $link? (y/n) " -n 1
                echo ""
                # if the response is any character other than 'y'... skip the file
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    echo "Skipping $link"
                    return
                fi
            fi
        fi

        # if the link exists and points to a directory, we don't want to add new link inside it... which appears to be what happens when 
        # $link points to a link that points to a directory... that link is not replaced, but the new link is created inside the directory
        if [ -d $link ]; then
            rm -rf $link
        fi
        ln -f -s $dest $link
    }

    function fetch_files () {
        if [ "$CODESPACES" = true ] ; then
            echo "Running in codespaces..."
            DIR="/workspaces/.codespaces/.persistedshare/dotfiles"
        fi

        if [ ! -d $DIR ]; then
            git clone https://github.com/jsg2021/dotfiles.git $DIR
            cd $DIR
            git submodule update --init --recursive
        fi

    }

    function install_tools() {

        if ! command -v fnm &> /dev/null; then
            curl -fsSL https://fnm.vercel.app/install | bash
        fi

        if [ "$CODESPACES" = true ] ; then
            echo "Running in codespaces...skipped apps"
            return
        else
            sh $CWD/scripts/install-1password
            sh $CWD/scripts/install-github
        fi

        sh $CWD/scripts/install-bat
        sh $CWD/scripts/install-fzf
        sh $CWD/scripts/install-lsd
    }

    function install_homebrew() {
        if ! command -v brew &> /dev/null; then
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
    }

    function install_vim_config() {
        link_file $DIR/vim/vimrc ~/.vimrc
        
        mkdir -p ~/.vim/pack/themes/start
        mkdir -p ~/.local/share/nvim/site/pack/themes/start

        TARGET=pack/themes/start/vim-code-dark
        VIM_TARGET=~/.vim/$TARGET
        NVIM_TARGET=~/.local/share/nvim/site/$TARGET

        link_file $DIR/vim/colors/vim-code-dark $VIM_TARGET
        link_file $DIR/vim/colors/vim-code-dark $NVIM_TARGET
    }

    function install_configs () {
        FILES=(gitconfig bash_profile zshrc)
        for f in "${FILES[@]}"
        do 
            link_file "$DIR/configs/$f" ~/.$f
        done

        install_vim_config

        zsh -c "zstyle ':omz:update' mode reminder"
        zsh -c "zstyle ':omz:update' frequency 30"
        # set shell 
        if [[ "$SHELL" != $(which zsh) ]]; then 
            chsh -s $(which zsh)
            if [[ "$OSTYPE" != "darwin"* ]]; then
                echo "Reboot for SHELL change to take effect."
            fi
        fi
    }

    function install_linux () {
        if [ "$CODESPACES" = true ] ; then
            echo "Running in codespaces...skip install_linux"
            return
        fi

        if command -v dnf &> /dev/null; then 
            sudo dnf install -y xclip xsel
        elif command -v apt-get &> /dev/null; then
            sudo apt-get install -y xclip xsel
        fi

        sudo ln -s ~/.dotfiles/scripts/goto-windows /usr/local/bin/goto-windows &&
            mkdir -p ~/.local/share/applications &&
            ln -s "$DIR/configs/linux/uefi-reboot.desktop" ~/.local/share/applications/uefi-reboot.desktop &&
            ln -s "$DIR/configs/linux/goto-windows.desktop" ~/.local/share/applications/goto-windows.desktop
    }

    function install_macos() {
        if [ "$CODESPACES" = true ] ; then
            echo "Running in codespaces...skip install_macos"
            return
        fi

        link_file "$DIR/configs/bash_profile" ~/.profile

        install_homebrew
    }


    fetch_files

    if [[ "$OSTYPE" == "darwin"* ]]; then
        install_macos
    else  
        install_linux
    fi

    install_configs
    install_tools
}